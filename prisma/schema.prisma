// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum AchievementType {
  FIRST_RACE
  FIRST_SNIPPET
  FIFTH_RACE
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  timezone      String    @default("Africa/Douala")
  tokens        Int       @default(10)
  level         Int       @default(1)

  results              Result[]
  challenges           Challenge[]
  achievements         Achievement[]
  followers            String[]
  following            String[]
  notifications        Notification[]
  ChallengeParticipant ChallengeParticipant[]
  Snippet              Snippet[]
  SnippetVote          SnippetVote[]
}

model Achievement {
  userId          String          @map("user_id")
  achievementType AchievementType @map("achievement_type")
  unlockedAt      DateTime        @default(now()) @map("unlocked_at")
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, achievementType])
  @@map("achievements")
}

model Result {
  id              String                 @id @default(cuid())
  snippet         Snippet                @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  userId          String                 @map("user_id")
  createdAt       DateTime               @default(now()) @map("created_at")
  accuracy        Decimal                @db.Decimal(5, 2)
  cpm             Int
  takenTime       String                 @map("taken_time")
  errorCount      Int?                   @map("error_count")
  user            User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippetId       String
  RaceParticipant ChallengeParticipant[]

  @@map("results")
}

model Challenge {
  id String @id @default(cuid())
  name            String
  emoji           String @default("")
  snippetId    String                 @map("snippet_id")
  snippet      Snippet                @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  participants ChallengeParticipant[]

  repeatPattern   String @default("1d") // repeat interval, repeat type, repeat on
  readablePattern String @default("Daily") // user readable version of repeatPattern for UI purposes
  // a habit can have multiple check-ins in a day like (morning and evening) or week (Mon, Wed, Fri) so we need to track the check-ins for a habit, so we need two fields one for the total check-ins and one for the last check-in
  levels          Int    @default(1) // total check-ins
  lastLevel       Int    @default(0) // last check-in

  goal            Int    @default(30) // goal is the number of check-ins required to finish a habit
  // goal reached when streak == goal

  streak       Int      @default(0) // current streak
  lastStreak   Int      @default(0) // last streak before the current streak
  streakBreaks Int      @default(0) // number of times the streak was broken


  startedAt DateTime? @map("started_at")
  endedAt   DateTime? @map("ended_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("challenge")
}

model ChallengeParticipant {
  id String @id @default(cuid())

  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId String

  // a race participant could be a guest user
  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // a user could exit the race without finishing, or is a guest user
  resultId String? @map("result_id")
  result   Result? @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@map("challenge_participants")
}

model Snippet {
  id   String  @id @default(cuid())
  name String?

  code     String
  language String
  User     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String?  @map("user_id")
  onReview Boolean  @default(false) @map("on_review")
  rating   Int      @default(0)
  Result   Result[]

  votes SnippetVote[]
  Race  Challenge[]

  @@map("snippets")
}

model SnippetVote {
  snippetId String
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Snippet   Snippet  @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  type      VoteType

  @@id([userId, snippetId])
  @@map("snippet_votes")
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  description String
  ctaUrl      String?  @map("cta_url") // URL to redirect when user click on notification
  read        Boolean  @default(false)
  userId      String   @map("user_id")
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}
